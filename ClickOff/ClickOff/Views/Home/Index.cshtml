@model dynamic

@{
    ViewBag.Title = "Click-Off!";
}

<h2>Click-Off!</h2>

<div id="cookiesBaked" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<div id="cookiesInBank" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<div id="cps" style="min-width: 310px; height: 400px; margin: 0 auto"></div>


@section Scripts{
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript">

        $(function() {
            $(document).ready(function() {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });

                Highcharts.chart('cookiesBaked', {
                    chart: {
                        type: 'spline',
                        animation: Highcharts.svg, // don't animate in old IE
                        marginRight: 10,
                    },
                    title: {
                        text: 'Cookies baked'
                    },
                    xAxis: {
                        type: 'datetime',
                        tickPixelInterval: 150,
                        minRange: 8000
                    },
                    yAxis: {
                        title: {
                            text: 'Cookies'
                        }
                    },
                    tooltip: {
                        formatter: function() {
                            return '<b>' + this.series.name + '</b><br/>' +
                                Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                                Highcharts.numberFormat(this.y, 2);
                        }
                    },
                    legend: {
                        enabled: false
                    },
                    exporting: {
                        enabled: true
                    },
                    series: [
                    ]
                });

                Highcharts.chart('cookiesInBank', {
                    chart: {
                        type: 'spline',
                        animation: Highcharts.svg, // don't animate in old IE
                        marginRight: 10,
                    },
                    title: {
                        text: 'Cookies in bank'
                    },
                    xAxis: {
                        type: 'datetime',
                        tickPixelInterval: 150,
                        minRange: 8000
                    },
                    yAxis: {
                        title: {
                            text: 'Cookies'
                        }
                    },
                    tooltip: {
                        formatter: function() {
                            return '<b>' + this.series.name + '</b><br/>' +
                                Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                                Highcharts.numberFormat(this.y, 2);
                        }
                    },
                    legend: {
                        enabled: false
                    },
                    exporting: {
                        enabled: true
                    },
                    series: [
                    ]
                });

                Highcharts.chart('cps', {
                    chart: {
                        type: 'spline',
                        animation: Highcharts.svg, // don't animate in old IE
                        marginRight: 10,
                    },
                    title: {
                        text: 'Cookies per second'
                    },
                    xAxis: {
                        type: 'datetime',
                        tickPixelInterval: 150,
                        minRange: 8000
                    },
                    yAxis: {
                        title: {
                            text: 'Cps'
                        }
                    },
                    tooltip: {
                        formatter: function() {
                            return '<b>' + this.series.name + '</b><br/>' +
                                Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                                Highcharts.numberFormat(this.y, 2);
                        }
                    },
                    plotOptions: {
                        series: {
                            events: {
                                legendItemClick: function(event) {

                                    var toggleSeries = function(chartId, originSeries) {
                                        var chart = $(chartId).highcharts();
                                        var series = chart.get(originSeries.options.id); //get corresponding series

                                        if (series) {
                                            if (originSeries.visible) {
                                                series.hide();
                                            } else {
                                                series.show();
                                            }
                                        }
                                    }

                                    toggleSeries("#cookiesBaked", this);
                                    toggleSeries("#cookiesInBank", this);
                                }
                            }
                        }
                    },
                    exporting: {
                        enabled: true
                    },
                    series: [
                    ]
                });
            });
        });

    </script>
    <script type="text/javascript">
        var poopiePoints = 120;
        var seriesOptions = [];
        var seriesData = [];

        var addPoint = function(chartIndex, seriesIndex, x, y) {
            // TODO resolution by name, not index...
            if (seriesIndex >= seriesData.length) {
                var data = [[], [], []];
                seriesData.push(data);
            }
            
            var shift = seriesData[seriesIndex][chartIndex].length >= poopiePoints;
            if (shift) {
                seriesData[seriesIndex][chartIndex].shift([x, y]);
            } else {
                seriesData[seriesIndex][chartIndex].push([x, y]);
            }


            if (Highcharts.charts[chartIndex].series[seriesIndex].visible) {
                Highcharts.charts[chartIndex].series[seriesIndex].addPoint([x, y], true, shift);
            } else {
                Highcharts.charts[chartIndex].series[seriesIndex].setData(seriesData[seriesIndex][chartIndex], true, false);
            }


        }

        $(function() {
            // Declare a proxy to reference the hub.
            var chat = $.connection.resultHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.updateCookies = function(name, request) {

                var seriesIndex = -1;
                for (var i = 0; i < seriesOptions.length; i++) {
                    if (seriesOptions[i].name === name) {
                        seriesIndex = i;
                        break;
                    }
                }

                if (seriesIndex < 0) {
                    var options = { id: 'series' + seriesOptions.length, name: name };
                    Highcharts.charts[0].addSeries(options);
                    Highcharts.charts[1].addSeries(options);
                    Highcharts.charts[2].addSeries(options);
                    seriesIndex = seriesOptions.push(options) - 1;
                }

                var x = (new Date()).getTime(); // current time
                var y = request.CookiesBaked;
                addPoint(0, seriesIndex, x, y);
                //Highcharts.charts[0].series[seriesIndex].addPoint([x, y], true, false);

                y = request.CookiesInBank;
                addPoint(1, seriesIndex, x, y);
                //Highcharts.charts[1].series[seriesIndex].addPoint([x, y], true, false);

                y = request.Cps;
                addPoint(2, seriesIndex, x, y);
                //Highcharts.charts[2].series[seriesIndex].addPoint([x, y], true, false);
            };


            //// Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));
            //// Set initial focus to message input box.
            //$('#message').focus();
            //// Start the connection.
            $.connection.hub.start();
        });

        // script to report data with:
        //var getStat = function (index) {
        //    var numberParts = $("#menu .listing:eq(" + index + ")").text().split(":")[1].trim().split(" ");
        //    return numberParts[0] + " " + numberParts[1];
        //}

        //var prepareRequest = function () {
        //    var statsOpened = $("#menu").find(".section").text() === "Statistics";
        //    if (!statsOpened) {
        //        $("#statsButton").click();
        //    }

        //    var request = {
        //        CookiesBaked: getStat(1),
        //        CookiesInBank: getStat(0),
        //        Cps: getStat(5)
        //    };

        //    if (!statsOpened) {
        //        $("#statsButton").click();
        //    }

        //    return request;
        //}

        //var address = "http://localhost/ClickOff/api/Results?name=";
        //var sendData = function (name) {
        //    $.ajax({
        //        url: address + name,
        //        method: 'POST',
        //        async: true,
        //        data: prepareRequest()

        //    });
        //}

        //var report = true;
        //var reportData = function (name, timeout) {
        //    sendData(name);
        //    if (!report) {
        //        return;
        //    }

        //    setTimeout(reportData, timeout, name, timeout);
        //}
    </script>
}
